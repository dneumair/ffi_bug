/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct test_PrimitiveVec {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_test_PrimitiveVec() {
    assert_eq!(
        ::std::mem::size_of::<test_PrimitiveVec>(),
        8usize,
        concat!("Size of: ", stringify!(test_PrimitiveVec))
    );
    assert_eq!(
        ::std::mem::align_of::<test_PrimitiveVec>(),
        4usize,
        concat!("Alignment of ", stringify!(test_PrimitiveVec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<test_PrimitiveVec>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(test_PrimitiveVec),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<test_PrimitiveVec>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(test_PrimitiveVec),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct test_NonPrimitiveVec {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_test_NonPrimitiveVec() {
    assert_eq!(
        ::std::mem::size_of::<test_NonPrimitiveVec>(),
        8usize,
        concat!("Size of: ", stringify!(test_NonPrimitiveVec))
    );
    assert_eq!(
        ::std::mem::align_of::<test_NonPrimitiveVec>(),
        4usize,
        concat!("Alignment of ", stringify!(test_NonPrimitiveVec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<test_NonPrimitiveVec>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(test_NonPrimitiveVec),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<test_NonPrimitiveVec>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(test_NonPrimitiveVec),
            "::",
            stringify!(y)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?AddPrimitiveVec@test@@YA?AUPrimitiveVec@1@U21@HH@Z"]
    pub fn test_AddPrimitiveVec(
        by_value: test_PrimitiveVec,
        add_x: ::std::os::raw::c_int,
        add_y: ::std::os::raw::c_int,
    ) -> test_PrimitiveVec;
}
extern "C" {
    #[link_name = "\u{1}?AddNonPrimitive@test@@YA?AUNonPrimitiveVec@1@U21@HH@Z"]
    pub fn test_AddNonPrimitive(
        by_value: test_NonPrimitiveVec,
        add_x: ::std::os::raw::c_int,
        add_y: ::std::os::raw::c_int,
    ) -> test_NonPrimitiveVec;
}
